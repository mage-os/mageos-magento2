<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminAssertPasswordResetSettingsTest">
        <annotations>
            <features value="Customer"/>
            <stories value="Password rest settings"/>
            <title value="Admin assert password reset setting"/>
            <description value="Admin assert password reset settings section in customer configuration page."/>
            <severity value="MAJOR"/>
            <testCaseId value="AC-4449"/>
        </annotations>
        <before>
            <!-- Login to admin -->
            <actionGroup ref="AdminLoginActionGroup" stepKey="LoginAsAdmin"/>
        </before>
        <after>
            <!-- Logout from admin -->
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
        </after>
        <!--Navigate to Customer Configuration Page-->
        <actionGroup ref="AdminNavigateToCustomerConfigurationActionGroup" stepKey="gotoCustomerConfiguration"/>
        <!--Expand to Password Options Page-->
        <actionGroup ref="AdminOpenPasswordOptionsSectionActionGroup" stepKey="gotoPasswordOptions"/>
        <!--See values for password reset protection type-->
        <seeOptionIsSelected selector="{{AdminCustomerConfigSection.passwordResetProtectionType}}" userInput="By IP and Email" stepKey="seeOneColumnSelected"/>
        <waitForElement selector="{{AdminCustomerConfigSection.passwordResetProtectionTypeOptions('2')}}" stepKey="waitToGrabTextFromOption2"/>
        <grabTextFrom selector="{{AdminCustomerConfigSection.passwordResetProtectionTypeOptions('2')}}" stepKey="grabTextFromOption2"/>
        <assertEquals stepKey="assertByIPIsPresent">
            <expectedResult type="string">By IP</expectedResult>
            <actualResult type="string">{$grabTextFromOption2}</actualResult>
        </assertEquals>
        <waitForElement selector="{{AdminCustomerConfigSection.passwordResetProtectionTypeOptions('3')}}" stepKey="waitToGrabTextFromOption3"/>
        <grabTextFrom selector="{{AdminCustomerConfigSection.passwordResetProtectionTypeOptions('3')}}" stepKey="grabTextFromOption3"/>
        <assertEquals stepKey="assertByEmailIsPresent">
            <expectedResult type="string">By Email</expectedResult>
            <actualResult type="string">{$grabTextFromOption3}</actualResult>
        </assertEquals>
        <waitForElement selector="{{AdminCustomerConfigSection.passwordResetProtectionTypeOptions('4')}}" stepKey="waitToGrabTextFromOption4"/>
        <grabTextFrom selector="{{AdminCustomerConfigSection.passwordResetProtectionTypeOptions('4')}}" stepKey="grabTextFromOption4"/>
        <assertEquals stepKey="assertNoneIsPresent">
            <expectedResult type="string">None</expectedResult>
            <actualResult type="string">{$grabTextFromOption4}</actualResult>
        </assertEquals>
        <!--See Max Number of Password Reset Requests field is present and has numeric value-->
        <seeInField selector="{{AdminCustomerConfigSection.maxReqsOfPasswordReset}}" userInput="5" stepKey="seeValueForPasswordResetRequests"/>
        <!--See Min Time Between Password Reset Requests field is present and has numeric value-->
        <seeInField selector="{{AdminCustomerConfigSection.minTimeBtwnPasswordResetRequest}}" userInput="10" stepKey="seeValueForMinTimeBtwnPasswordResetRequest"/>
    </test>
</tests>
