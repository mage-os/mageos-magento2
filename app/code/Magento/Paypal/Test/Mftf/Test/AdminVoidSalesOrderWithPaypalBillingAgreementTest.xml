<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright 2025 Adobe
  * All Rights Reserved.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminVoidSalesOrderWithPaypalBillingAgreementTest">
        <annotations>
            <features value="PayPal"/>
            <stories value="Void Order with billing agreement"/>
            <title value="Void order placed within Billing Agreement"/>
            <description value="Place an order with billing agreement as payment method and Void the Order"/>
            <severity value="MAJOR"/>
            <testCaseId value="AC-5004"/>
            <group value="3rd_party_integration"/>
        </annotations>
        <before>
            <!-- Simple product is created -->
            <createData entity="SimpleProduct" stepKey="createProduct">
                <field key="price">10</field>
            </createData>
            <!-- US Customer is created -->
            <createData entity="Simple_US_Customer_CA" stepKey="createCustomer"/>
            <!-- Set Billing Agreement value to Auto -->
            <magentoCLI command="config:set {{BillingAgreement.path}} {{BillingAgreement.value}}" stepKey="enableAutoBilling"/>
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
            <!-- Configure PayPal Express Checkout -->
            <actionGroup ref="AdminPayPalExpressCheckoutEnableActionGroup" stepKey="ConfigPayPalExpress">
                <argument name="credentials" value="SamplePaypalExpressConfig2"/>
            </actionGroup>
            <actionGroup ref="AdminPayPalExpressCheckoutEnableBillingAgreementActionGroup" stepKey="enableBillingAgreement">
                <argument name="countryCode" value="{{MerchantUnitedStates.value}}"/>
            </actionGroup>
            <!-- Precondition Step 1: Order is placed within PayPal Billing Agreement -->
            <actionGroup ref="LoginToStorefrontActionGroup" stepKey="storefrontCustomerLogin">
                <argument name="Customer" value="$$createCustomer$$"/>
            </actionGroup>
            <!-- Add product to cart -->
            <actionGroup ref="AddSimpleProductToCartActionGroup" stepKey="addProductToCart">
                <argument name="product" value="$$createProduct$$"/>
            </actionGroup>
            <!-- Go to Checkout Page -->
            <actionGroup ref="StorefrontOpenCheckoutPageActionGroup" stepKey="goToCheckout"/>
            <actionGroup ref="CheckoutSelectFlatRateShippingMethodActionGroup" stepKey="selectFlatRateShipping"/>
            <actionGroup ref="StorefrontCheckoutClickNextOnShippingStepActionGroup" stepKey="clickNext"/>
            <!-- Click on PayPal payment radio button -->
            <waitForElementClickable selector="{{CheckoutPaymentSection.PayPalPaymentRadio}}" stepKey="waitForPayPalRadioButton"/>
            <click selector="{{CheckoutPaymentSection.PayPalPaymentRadio}}" stepKey="selectPaypalPayment"/>
            <actionGroup ref="SwitchToPayPalGroupBtnActionGroup" stepKey="clickPayPalBtn"/>
            <!-- Login to Paypal in-context-->
            <actionGroup ref="StorefrontLoginToPayPalPaymentAccountTwoStepActionGroup" stepKey="loginToPayPal"/>
            <!-- Click PayPal button and go back to Magento site -->
            <actionGroup ref="StorefrontPaypalSwitchBackToMagentoFromCheckoutPageActionGroup" stepKey="confirmPaymentAndGoBackToMagento"/>
        </before>
        <after>
            <actionGroup ref="AdminPayPalExpressCheckoutDisableActionGroup" stepKey="disablePaypalExpressCheckout"/>
            <!-- Login to Paypal in-context-->
            <actionGroup ref="AdminClearPayPalExpressCheckoutDataActionGroup" stepKey="clearPaypalExpressCheckoutFields"/>
            <actionGroup ref="AdminPayPalExpressCheckoutDisableBillingAgreementActionGroup" stepKey="disableBillingAgreement">
                <argument name="countryCode" value="{{MerchantUnitedStates.value}}"/>
            </actionGroup>
            <!-- Set Billing Agreement value to default -->
            <magentoCLI command="config:set {{BillingAgreement.path}} {{BillingAgreement.default}}" stepKey="disableAutoBilling"/>
            <!-- Delete Data -->
            <deleteData createDataKey="createCustomer" stepKey="deleteCustomer"/>
            <deleteData createDataKey="createProduct" stepKey="deleteProduct"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
        </after>
        <actionGroup ref="AssertStorefrontCheckoutSuccessActionGroup" stepKey="assertOrderSuccess"/>
        <grabTextFrom selector="{{CheckoutSuccessMainSection.orderNumber22}}" stepKey="orderNumber"/>
        <waitForElementVisible selector="{{CheckoutSuccessMainSection.billingAgreement}}" stepKey="waitForBillingAgreement"/>
        <grabTextFrom selector="{{CheckoutSuccessMainSection.billingAgreement}}" stepKey="billingAgreement"/>
        <assertNotEmpty stepKey="assertOrderIdIsNotEmpty">
            <actualResult type="const">$orderNumber</actualResult>
        </assertNotEmpty>
        <assertNotEmpty stepKey="assertBillingAgreementIsNotEmpty">
            <actualResult type="const">$billingAgreement</actualResult>
        </assertNotEmpty>
        <!-- Step 2&3: Go to Sales > Orders & Open the Order from preconditions -->
        <actionGroup ref="OpenOrderByIdActionGroup" stepKey="openOrder">
            <argument name="orderId" value="{$orderNumber}"/>
        </actionGroup>
        <!-- Step 4&5: Void created order & Click OK button-->
        <actionGroup ref="AdminVoidPendingOrderActionGroup" stepKey="voidPendingOrder"/>
        <actionGroup ref="AdminOrderViewCheckStatusActionGroup" stepKey="checkOrderStatus">
            <argument name="status" value="{{OrderStatus.processing}}"/>
        </actionGroup>
        <!-- Step 6: Observe order data -->
        <waitForElementVisible selector="{{AdminOrderDetailsInformationSection.paymentInformationField('Last Transaction ID')}}" stepKey="waitForGrabLastTransactionID"/>
        <grabTextFrom selector="{{AdminOrderDetailsInformationSection.paymentInformationField('Last Transaction ID')}}" stepKey="grabLastTransactionID"/>
        <waitForElementVisible selector="{{AdminOrderNotesSection.voidAuthorizationId('$grabLastTransactionID')}}" stepKey="waitForVoidAuthorizationNotesWithID"/>
        <grabTextFrom selector="{{AdminOrderNotesSection.voidAuthorizationId('$grabLastTransactionID')}}" stepKey="getVoidAuthorizationNotesWithID"/>
        <actionGroup ref="AdminOpenOrderCommentsHistoryActionGroup" stepKey="clickOnCommentsHistoryTab"/>
        <grabTextFrom selector="{{AdminOrderCommentsTabSection.orderCommentsWithType(BillingAgreement.comment)}}" stepKey="grabOrderStatus"/>
        <waitForText selector="{{AdminOrderCommentsTabSection.authorizationNotes(BillingAgreement.label)}}" userInput="$getVoidAuthorizationNotesWithID" stepKey="seeOrderHistoryNotes"/>
        <waitForText selector="{{AdminOrderCommentsTabSection.orderComments}}" userInput="{{BillingAgreement.amount_note}}" stepKey="seeOrderHistoryPrice"/>
        <!-- Check the last transaction of the order and validate the details for Void and Authorization-->
        <waitForElementClickable selector="{{AdminTransactionsGridSection.transactionsSectionBtn}}" stepKey="waitForTransactionsTabToBeClicked"/>
        <click selector="{{AdminTransactionsGridSection.transactionsSectionBtn}}" stepKey="clickTransactionsTab"/>
        <waitForElementVisible selector="{{AdminTransactionsGridSection.orderTxnTable}}" stepKey="orderTransactionsTableIsVisible"/>
        <selectOption selector="{{AdminTransactionsGridSection.orderTxnTableTypeFilter}}" userInput="{{BillingAgreement.status}}" stepKey="selectVoidTypeTxn"/>
        <waitForElementClickable selector="{{AdminTransactionsGridSection.orderTxnTableSearchBtn}}" stepKey="waitToClickSearch"/>
        <click selector="{{AdminTransactionsGridSection.orderTxnTableSearchBtn}}" stepKey="clickSearch"/>
        <waitForPageLoad stepKey="waitForFilterToLoad"/>
        <waitForElementClickable selector="{{AdminTransactionsGridSection.orderTxnTableFirstRow}}" stepKey="clickOnVoidTransaction"/>
        <click selector="{{AdminTransactionsGridSection.orderTxnTableFirstRow}}" stepKey="clickVoidTxn"/>
        <waitForPageLoad stepKey="waitForTxnToLoad"/>
        <assertStringContainsString stepKey="assertEquals">
            <expectedResult type="string">{{BillingAgreement.comment}}</expectedResult>
            <actualResult type="variable">$grabOrderStatus</actualResult>
        </assertStringContainsString>
        <waitForText selector="{{AdminTransactionsGridSection.transactionData(AdminMenuPaypalTransaction.status)}}" userInput="{{StorefrontPaypalEnableSkipOrderReviewStepConfigData.label}}" stepKey="seeIfClosedHeaderIsSetAsYesForVoid"/>
        <waitForElementClickable selector="{{AdminProductFormActionSection.backButton}}" stepKey="waitForBackButtonToBeClicked"/>
        <click selector="{{AdminProductFormActionSection.backButton}}" stepKey="clickBackButton"/>
        <actionGroup ref="AdminViewAuthorizationTransactionsInOrderActionGroup" stepKey="validateAuthTransaction"/>
        <waitForText selector="{{AdminTransactionsGridSection.transactionData(AdminMenuPaypalTransaction.status)}}" userInput="{{StorefrontPaypalEnableSkipOrderReviewStepConfigData.label}}" stepKey="seeIfClosedHeaderIsSetAsYesForAuthorization"/>
    </test>
</tests>

