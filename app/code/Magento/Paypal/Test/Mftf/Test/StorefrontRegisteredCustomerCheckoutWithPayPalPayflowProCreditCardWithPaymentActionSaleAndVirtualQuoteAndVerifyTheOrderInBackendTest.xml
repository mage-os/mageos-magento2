<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="StorefrontRegisteredCustomerCheckoutWithPayPalPayflowProCreditCardWithPaymentActionSaleAndVirtualQuoteAndVerifyTheOrderInBackendTest">
        <annotations>
            <features value="PayPal"/>
            <stories value="Paypal Payments Pro"/>
            <title value="Registered Checkout with PayPal Payflow Pro credit card (Payment Action = Sale) and Virtual quote"/>
            <description value="Storefront Registered Customer Checkout with PayPal Payflow Pro credit card (Payment Action = Sale) with Virtual Product and assert the details in order view page."/>
            <severity value="CRITICAL"/>
            <testCaseId value="AC-5685"/>
            <group value="paypalPayflowPro"/>
            <group value="pr_exclude"/>
            <group value="3rd_party_integration"/>
        </annotations>
        <before>
            <createData entity="VirtualProduct" stepKey="createVirtualProduct"/>
            <createData entity="Simple_US_Customer" stepKey="createCustomer"/>
            <magentoCLI command="config:set {{StorefrontPaypalPayflowProSalePaymentActionOptionConfigData.path}} {{StorefrontPaypalPayflowProSalePaymentActionOptionConfigData.value}}" stepKey="setPaymentActionSale"/>
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
        </before>
        <after>
            <actionGroup ref="AdminOrdersPageOpenActionGroup" stepKey="navigateToSalesOrderPage"/>
            <actionGroup ref="AdminClearFiltersActionGroup" stepKey="clickOnButtonToRemoveFiltersIfPresent"/>
            <deleteData createDataKey="createVirtualProduct" stepKey="deleteVirtualProduct"/>
            <magentoCLI command="config:set {{StorefrontPaypalPayflowProAuthorizationPaymentActionOptionConfigData.path}} {{StorefrontPaypalPayflowProAuthorizationPaymentActionOptionConfigData.value}}" stepKey="setPaymentActionAuthorization"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
        </after>
        <actionGroup ref="LoginToStorefrontActionGroup" stepKey="customerLogin">
            <argument name="Customer" value="$createCustomer$" />
        </actionGroup>
        <actionGroup ref="StorefrontOpenProductEntityPageActionGroup" stepKey="goToProductOnStorefront">
            <argument name="product" value="$$createVirtualProduct$$"/>
        </actionGroup>
        <!-- Add product to cart -->
        <actionGroup ref="AddToCartFromStorefrontProductPageActionGroup" stepKey="addToCartFromStorefrontProductPage">
            <argument name="productName" value="$createVirtualProduct.name$"/>
        </actionGroup>
        <actionGroup ref="StorefrontCartPageOpenActionGroup" stepKey="goToCheckoutCartPage"/>
        <actionGroup ref="StorefrontClickProceedToCheckoutActionGroup" stepKey="clickProceedToCheckout"/>
        <!-- Checkout select Credit Card (Payflow Pro) and place order-->
        <conditionalClick selector="{{StorefrontCheckoutPaymentMethodSection.checkPaymentMethodByName('Credit Card (Payflow Pro)')}}" dependentSelector="{{StorefrontCheckoutPaymentMethodSection.checkPaymentMethodByName('Credit Card (Payflow Pro)')}}" visible="true" stepKey="selectCreditCardPaymentMethod"/>
        <waitForPageLoad stepKey="waitForLoadingMaskAfterPaymentMethodSelection"/>
        <!--Fill Card Data -->
        <actionGroup ref="StorefrontPaypalFillCardDataActionGroup" stepKey="fillCardData">
            <argument name="cardData" value="VisaDefaultCard"/>
        </actionGroup>
        <actionGroup ref="ClickPlaceOrderActionGroup" stepKey="clickOnPlaceOrder"/>
        <grabTextFrom selector="{{CheckoutSuccessMainSection.orderNumber22}}" stepKey="grabOrderNumber"/>
        <waitForText selector="{{CheckoutSuccessMainSection.success}}" userInput="We'll email you an order confirmation with details and tracking info." stepKey="seeSuccessMessage"/>
        <actionGroup ref="AssertShoppingCartIsEmptyActionGroup" stepKey="seeEmptyShoppingCartAfterPlacingAnOrder"/>
        <actionGroup ref="OpenOrderByIdActionGroup" stepKey="openOrder">
            <argument name="orderId" value="{$grabOrderNumber}"/>
        </actionGroup>
        <waitForText selector="{{AdminOrderTotalSection.grandTotal}}" userInput="$99.99" stepKey="assertGrandTotal"/>
        <waitForElementVisible selector="{{AdminOrderDetailsInformationSection.paymentInformationField('Last Transaction ID')}}" stepKey="waitForTransactionIDFieldToBeAppeared"/>
        <grabTextFrom selector="{{AdminOrderDetailsInformationSection.paymentInformationField('Last Transaction ID')}}" stepKey="grabTransactionID"/>
        <actionGroup ref="AdminOpenOrderCommentsHistoryActionGroup" stepKey="clickOnCommentsHistory"/>
        <waitForText selector="{{AdminOrderCommentsTabSection.orderComment}}" userInput="Captured amount of $99.99 online. Transaction ID: &quot;{$grabTransactionID}&quot;" stepKey="seeOrderHistoryNotes"/>

        <actionGroup ref="AdminOpenInvoiceTabFromOrderPageActionGroup" stepKey="openInvoicesTabOrdersPage"/>
        <waitForLoadingMaskToDisappear stepKey="waitForInvoiceGridLoadingMask1" after="openInvoicesTabOrdersPage"/>
        <conditionalClick selector="{{AdminOrderInvoicesTabSection.clearFilters}}" dependentSelector="{{AdminOrderInvoicesTabSection.clearFilters}}" visible="true" stepKey="clearExistingOrderFilters"/>
        <waitForElementClickable selector="{{AdminOrderInvoicesTabSection.viewInvoice}}" stepKey="waitForInvoicePageToOpen"/>
        <click selector="{{AdminOrderInvoicesTabSection.viewInvoice}}" stepKey="openInvoicePage"/>
        <waitForPageLoad stepKey="waitForInvoicePageLoad"/>
        <waitForText selector="{{AdminOrderInvoiceViewSection.transactionID}}" userInput="$grabTransactionID" stepKey="assertTransactionIDInInvoice"/>
        <waitForElementClickable selector="{{AdminInvoiceTotalSection.backButton}}" stepKey="waitForBackButtonToBeClicked"/>
        <click selector="{{AdminInvoiceTotalSection.backButton}}" stepKey="clickOnBackButton"/>
        <actionGroup ref="AdminOpenTransactionsTabInOrderPageActionGroup" stepKey="openTransactionTabOrdersPage"/>
        <waitForText selector="{{AdminTransactionsGridSection.transactionId}}" userInput="$grabTransactionID" stepKey="getVoidTransaction"/>
    </test>
</tests>
