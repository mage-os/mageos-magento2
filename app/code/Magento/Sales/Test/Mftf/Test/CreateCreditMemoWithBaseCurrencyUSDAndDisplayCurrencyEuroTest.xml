<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright © Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="CreateCreditMemoWithBaseCurrencyUSDAndDisplayCurrencyEuroTest">
        <annotations>
            <features value="Order"/>
            <stories value="Create Credit Memo"/>
            <title value="Create Credit Memo with Base Currency as USD and Display Currency as Euro"/>
            <description value="The purpose of this test is to create credit memo with base currency as USD and display currency as Euro and validate the corresponding prices and currency symbols"/>
            <severity value="CRITICAL"/>
            <testCaseId value="AC-4521"/>
        </annotations>
        <before>
            <!-- Create customer -->
            <createData entity="Simple_US_Customer" stepKey="createCustomer"/>
            <!-- Create SimpleProductWithPrice100 -->
            <createData entity="SimpleProduct_100" stepKey="createProduct"/>
            <!-- Currency Options settings -->
            <magentoCLI command="config:set {{SetAllowedCurrenciesConfigForUSD.path}} {{SetAllowedCurrenciesConfigForUSD.value}},{{SetAllowedCurrenciesConfigForEUR.value}}" stepKey="setAllowedCurrencyEURAndUSD"/>
            <magentoCLI command="config:set currency/options/default EUR" stepKey="setCurrencyDefaultEUR"/>
            <!-- Login as Admin -->
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
            <!-- Navigate to currency rates page -->
            <actionGroup ref="AdminOpenCurrencyRatesPageActionGroup" stepKey="naviagteToCurrencyRatesPage"/>
            <!-- Currency Rates (Stores > Currency Rates): 1.000 USD = 0.7067 EUR -->
            <actionGroup ref="AdminSetCurrencyRatesActionGroup" stepKey="setCurrencyRates">
                <argument name="firstCurrency" value="USD"/>
                <argument name="secondCurrency" value="EUR"/>
                <argument name="rate" value="0.7067"/>
            </actionGroup>
            <actionGroup ref="CliCacheFlushActionGroup" stepKey="flushCache">
                <argument name="tags" value="config full_page"/>
            </actionGroup>
        </before>
        <after>
            <magentoCLI command="config:set {{SetDefaultCurrencyUSDConfig.path}} {{SetDefaultCurrencyUSDConfig.value}}" stepKey="resetDefaultCurrencyBaseBackToUSD"/>
            <magentoCLI command="config:set {{SetAllowedCurrenciesConfigForUSD.path}} {{SetAllowedCurrenciesConfigForUSD.value}}" stepKey="resetAllowedCurrencyBaseBackToUSD"/>
            <actionGroup ref="CliCacheFlushActionGroup" stepKey="flushCache">
                <argument name="tags" value="config full_page"/>
            </actionGroup>
            <!-- Customer log out -->
            <actionGroup ref="StorefrontCustomerLogoutActionGroup" stepKey="customerLogout"/>
            <!-- Delete customer -->
            <deleteData createDataKey="createCustomer" stepKey="deleteCustomer"/>
            <!-- Delete product -->
            <deleteData createDataKey="createProduct" stepKey="deleteProduct"/>
            <!-- Admin log out -->
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
        </after>
        <!-- Login as customer -->
        <actionGroup ref="LoginToStorefrontActionGroup" stepKey="loginToStorefrontAccount">
            <argument name="Customer" value="$$createCustomer$$"/>
        </actionGroup>
        <!-- Navigate To Simple Product Page -->
        <actionGroup ref="OpenStoreFrontProductPageActionGroup" stepKey="navigateToSimpleProductPage">
            <argument name="productUrlKey" value="$$createProduct.custom_attributes[url_key]$$"/>
        </actionGroup>
        <!-- Verify product prices for simple product -->
        <actionGroup ref="AssertStorefrontProductPricesActionGroup" stepKey="assertSimpleProductPrices">
            <argument name="productPrice" value="€70.67"/>
            <argument name="productFinalPrice" value="€70.67"/>
        </actionGroup>
        <!-- Add product to cart -->
        <actionGroup ref="AddSimpleProductToCartActionGroup" stepKey="addProductToCart">
            <argument name="product" value="$$createProduct$$"/>
        </actionGroup>
        <actionGroup ref="StorefrontCartPageOpenActionGroup" stepKey="goToShoppingCart"/>
        <actionGroup ref="StorefrontClickProceedToCheckoutActionGroup" stepKey="goToCheckout"/>
        <!-- verify flat rate €3.53 -->
        <waitForText selector="{{CheckoutShippingMethodsSection.price}}" stepKey="seeFlatRate" userInput="€3.53"/>
        <!-- click on Next button -->
        <actionGroup ref="StorefrontCheckoutClickNextButtonActionGroup" stepKey="clickNext"/>
        <!-- verify order summary -->
        <actionGroup ref="CheckOrderSummaryInCheckoutActionGroup" stepKey="checkOrderSummary">
            <argument name="subtotal" value="€70.67"/>
            <argument name="shippingTotal" value="€3.53"/>
            <argument name="shippingMethod" value="Flat Rate - Fixed"/>
            <argument name="total" value="€74.20"/>
        </actionGroup>
        <waitForText userInput="$105.00" selector="{{CheckoutPaymentSection.productChargedFor}}" stepKey="assertProductChargedFor"/>
        <!-- Place order -->
        <actionGroup ref="ClickPlaceOrderActionGroup" stepKey="placeOrder"/>
        <waitForElement selector="{{CheckoutSuccessMainSection.orderLink}}" stepKey="waitForOrderId"/>
        <grabTextFrom selector="{{CheckoutSuccessMainSection.orderLink}}" stepKey="orderId"/>
        <!-- Navigate to Sales order page -->
        <actionGroup ref="AdminOrdersPageOpenActionGroup" stepKey="navigateToSalesOrderPage"/>
        <!-- Open created order -->
        <actionGroup ref="AdminOpenOrderByEntityIdActionGroup" stepKey="filterOrdersGridById">
            <argument name="entityId" value="{$orderId}"/>
        </actionGroup>
        <!-- Submit invoice -->
        <actionGroup ref="AdminClickInvoiceButtonOrderViewActionGroup" stepKey="clickOnInvoiceBtn"/>
        <actionGroup ref="AdminInvoiceClickSubmitActionGroup" stepKey="clickSubmitInvoice"/>
        <waitForElementVisible selector="{{AdminMessagesSection.successMessage}}" stepKey="waitForSuccessMessage"/>
        <!-- Click 'Credit Memo' button and create new memo -->
        <actionGroup ref="AdminStartToCreateCreditMemoFromOrderPageActionGroup" stepKey="createCreditMemo"/>
        <!-- Assert Credit Memo refund prices -->
        <actionGroup ref="AssertAdminCreditMemoNewPageTotalsActionGroup" stepKey="assertCreditMemoRefundTotals">
            <argument name="refundShipping" value="5.00"/>
            <argument name="adjustmentRefund" value="0.00"/>
            <argument name="adjustmentFee" value="0.00"/>
            <argument name="subtotalRow" value="$100.00"/>
            <argument name="grandTotal" value="$105.00"/>
        </actionGroup>
        <!-- Assert Grand total and subtotal value -->
        <waitForElementVisible selector="{{AdminOrderTotalSection.orderTotalPrices('Grand Total','€74.20')}}" stepKey="waitForGrandTotalValueEURO"/>
        <waitForElementVisible selector="{{AdminOrderTotalSection.subTotalAndShipping('Subtotal','€70.67')}}" stepKey="waitForSubTotalValueEURO"/>
        <!-- Refund Offline -->
        <actionGroup ref="AdminClickRefundOfflineOnCreditMemoDetailPageActionGroup" stepKey="clickRefundOffline"/>
        <actionGroup ref="AdminOrdersPageOpenActionGroup" stepKey="navigateToSalesOrderPageAgain"/>
        <conditionalClick selector="{{AdminDataGridHeaderSection.clearFilters}}" dependentSelector="{{AdminDataGridHeaderSection.clearFilters}}" visible="true" stepKey="clickClearFilters"/>
        <waitForElementClickable selector="{{AdminProductGridFilterSection.columnsDropdown}}" stepKey="waitForColumnsDropdownToBeOpened"/>
        <click selector="{{AdminProductGridFilterSection.columnsDropdown}}" stepKey="openColumnsDropDown"/>
        <!-- Enable to display Total Refunded column and validate currency -->
        <checkOption selector="{{AdminProductGridFilterSection.viewColumnOption('Total Refunded')}}" stepKey="showRefundedColumn"/>
        <waitForElementClickable selector="{{AdminProductGridFilterSection.columnsDropdown}}" stepKey="waitForColumnsDropdownToBeClickedToClose"/>
        <click selector="{{AdminProductGridFilterSection.columnsDropdown}}" stepKey="closeColumnsDropDown"/>
        <waitForElement selector="{{AdminProductGridSection.headerNameAndValueOtherCurrency('Grand Total (Base)','105.00')}}" stepKey="waitForGrandTotalBaseValue"/>
        <grabTextFrom selector="{{AdminProductGridSection.headerNameAndValueOtherCurrency('Grand Total (Base)','105.00')}}" stepKey="grabGrandTotalBaseValue"/>
        <assertEquals stepKey="seeGrandTotalBase">
            <actualResult type="const">$grabGrandTotalBaseValue</actualResult>
            <expectedResult type="string">$105.00</expectedResult>
        </assertEquals>
        <waitForElementVisible selector="{{AdminProductGridSection.headerNameAndValueOtherCurrency('Grand Total (Purchased)','€74.20')}}"  stepKey="seeGrandTotalPurchased"/>
        <waitForElementVisible selector="{{AdminProductGridSection.headerNameAndValueOtherCurrency('Total Refunded','€74.20')}}"  stepKey="seeTotalRefunded"/>
    </test>
</tests>
